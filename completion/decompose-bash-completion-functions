#!/bin/bash
#
# This file is both used to generate a list of core commands and processes
# as well as generate bash completion

# Finds the decompose directory in parents
#
# Parameters:
#   $1: return value (decompose directory location)
_decompose-find-decompose-directory() {
  local __decompose_directory=$1
  local decompose_root
  _decompose-project-root decompose_root

  if [ -d "$decompose_root/.decompose" ]; then
    eval "$__decompose_directory=$decompose_root/.decompose"
    return 0
  fi
  return 1
}

# Returns the project root directory
#
# Parameters:
#   $1: return value (project root location)
_decompose-project-root() {
  local __return_val=$1
  local current_dir=$(realpath .)
  while [[ ! -d "$current_dir/.decompose" && \
    "$current_dir" != "/" ]]; do
    current_dir=$(realpath $current_dir/../)
  done

  # We hit the end. See if we found .decompose
  if [[ -d "$current_dir/.decompose" ]]; then
    if [ $# -eq 0 ]; then
      echo "$current_dir"
    else
      eval "$__return_val=$current_dir"
    fi
    return 0
  fi
  return 1
}

# Bring in all the processes code
_decompose-load-processes() {
  # Go through all environment commands
  local decompose_directory
  _decompose-find-decompose-directory decompose_directory

  # Main processes code
  if [ -f $decompose_directory/environment/processes ]; then
    . $decompose_directory/environment/processes
  fi
  # Also load custom processes
  if [ -f $decompose_directory/processes ]; then
    . $decompose_directory/processes
  fi
}

# Return all process names as output
_decompose-process-names() {
  _decompose-load-processes
  local p; for p in "${DECOMPOSE_PROCESSES[@]}"; do
    echo -n "$p "
  done
}

# Homebrew on Macs have version 1.3 of bash-completion which doesn't include
# _init_completion. This is a very minimal version of that function.
__my_init_completion()
{
   COMPREPLY=()
    _get_comp_words_by_ref cur prev words cword
}

# main
# For help:
# http://stackoverflow.com/questions/14513571/how-to-enable-default-file-completion-in-bash
_decompose_complete() {
  local cur prev words cword
  if declare -F _init_completions >/dev/null 2>&1; then
    _init_completion || return
  else
    __my_init_completion || return
  fi

  local processes=$(_decompose-process-names)
  local commands="--init --update --build --clean --version --help"

  # Do if 2 words already exist
  if [ "$cword" -gt "1" ]; then
    COMPREPLY=()
    return 0
  fi

  # Only match one level deep. Simple to do that!
  COMPREPLY=( $( compgen -W '$commands $processes' -- $cur ) )
  return 0
}
