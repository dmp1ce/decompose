#!/bin/bash

# Decompose tests, for my sanity

# Get the location of the script. Not the symlink.
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Source decompose functions
source "$DIR/decompose-functions"
source "$DIR/completion/decompose-bash-completion-functions"

# Make sure nothing is printed on stderr
_decompose-test-no-stderr() {
  local error_output=$(./decompose 2>&1 1>/dev/null)
  if [ -n "$error_output" ]; then
    echo "decompose had errors:"
    echo $error_output
    return 1
  fi
  return 0
}

# Test help function
_decompose-test-help-test() {
  local output=$(decompose-print-help)
  if [ ! -z "$ouput" ]; then
    echo "Help didn't print anything"
    return 1
  fi
  local error_output=$(decompose-print-help 2>&1 1>/dev/null)
  if [ -n "$error_output" ]; then
    echo "Help had errors:"
    echo $error_output
    return 1
  fi

  return 0
}

# Building test
_decompose-test-building-test() {
  _decompose-test-initialize-environment

  # Run Build
  local error_output=$(export HOME=$HOME && cd $working_dir && \
    decompose --build 2>&1 1>/dev/null)
  if [ -n "$error_output" ]; then
    echo "'decompose --build' had errors"
    echo "$error_output"
    return 1
  fi

  # Verify that the build work
  if [ ! -e "$working_dir/testing" ]; then
    echo "Build failed to produce '$working_dir/testing' file"
    return 1
  fi

  return 0
}
_decompose-test-building-test-cleanup() {
  _decompose-test-initialize-environment-cleanup
}

# Global data directory creation and location
_decompose-test-global-data-directory() {
  # Set home to 'user-home'
  mkdir "./tests-workspace/user-home"
  local HOME="$(realpath ./tests-workspace/user-home)"

  # Verify that the global directory does not exist
  local expected_global_dir="$HOME/.local/share/decompose"
  if [ -d "$expected_global_dir" ]; then
    echo "The global data directory already exists: "
    echo "  '$expected_global_dir'"
    return 1
  fi

  # Call function to get the directory
  local data_directory; decompose-global-data-dir data_directory >/dev/null

  # Verify the directory received is the same as expected
  if [ "$expected_global_dir" != "$data_directory" ]; then
    echo "The returned global directory was not what was expected."
    echo "Expected: '$expected_global_dir'"
    echo "Returned: '$data_directory'"
    return 1
  fi

  # Verify that the directory exists
  if [ ! -d "$data_directory" ]; then
    echo "The global data directory was not created."
    echo "  '$data_directory'"
    return 1
  fi

  return 0
}
_decompose-test-global-data-directory-cleanup() {
  # Cleanup the directory that was created
  local HOME="$(realpath ./tests-workspace/user-home)"
  $(cd $HOME; rmdir -p .local/share/decompose)

  # Remove user-home
  rmdir "./tests-workspace/user-home"
}

_decompose-test-build-ignores() {
  # Build environment
  _decompose-test-building-test
  local error_code="$?"
  if [ "$error_code" -gt "0" ]; then
    echo "Build failed"
    return 1
  fi

  # Verify that the ignore directory wasn't processed
  if [ -e "./tests-workspace/build-test/ignore_me/a_file" ]; then
    echo "'a_file' was generated when it should have been ignored"
    return 1
  fi

  return 0
}
_decompose-test-build-ignores-cleanup() {
  # Cleanup
  _decompose-test-building-test-cleanup
}

_decompose-test-project-root-param() {
  # Create a build environment
  _decompose-test-building-test
  local error_code="$?"
  if [ "$error_code" -gt "0" ]; then
    echo "Build failed"
    return 1
  fi

  # Change home and working directory
  local HOME=$(realpath "./tests-workspace/user-home")

  # Set current working directory
  working_dir="./tests-workspace/build-test"

  # Test function with parameter
  project_root_param=$(cd $working_dir; local project_root; \
    _decompose-project-root project_root; echo $project_root)
  if [ -z "$project_root_param" ]; then
    echo "_decompose-project-root returned emtpy parameter"
    return 1
  fi

  # Test function without parameter
  project_root_echo=$(cd $working_dir; _decompose-project-root)
  if [ -z "$project_root_echo" ]; then
    echo "_decompose-project-root returned emtpy echo"
    return 1
  fi

  return 0
}
_decompose-test-project-root-param-cleanup() {
  # Cleanup
  _decompose-test-building-test-cleanup
}

_decompose-test-decompose-init-fail() {
  _decompose-test-initialize-environment

  # Try to initialize the environment again
  # Make and set home directory
  local HOME=$(realpath "./tests-workspace/user-home")

  # Set current working directory
  working_dir="./tests-workspace/build-test"

  # Init build test enviornment
  local error_output=$(export HOME=$HOME && cd $working_dir && \
    decompose --init "../build-test-environment" 2>&1 1>/dev/null)
  if [ -n "$error_output" ]; then
    return 0
  fi

  decompose_echoerr "Expected error message from decompose --init but didn't receive one"
  return 1
}
_decompose-test-decompose-init-fail-cleanup() {
  _decompose-test-initialize-environment-cleanup
}

_decompose-test-init-git-exists() {
  # Make and set home directory
  mkdir "./tests-workspace/user-home"
  local HOME=$(realpath "./tests-workspace/user-home")

  # Set current working directory
  local working_dir="./tests-workspace/build-test"
  mkdir "./tests-workspace/build-test"

  # Setup git repository
  local git_url=$(realpath ./tests-workspace/build-test-environment)
  git config --global user.email "tester@example.com"
  git config --global user.name "tester"
  git -C "$git_url" init >/dev/null
  git -C "$git_url" add .
  git -C "$git_url" commit -m "Initial commit" >/dev/null

  # Initialize git before doing decompose --init
  local error_output=$(export HOME=$HOME && cd $working_dir && \
    git init && mkdir "test" && touch "test/hello.txt" && \
    git commit -m "Initial commit" 2>&1 1>/dev/null)
  # Change working directory
  local working_dir="$working_dir"/test

  # Init build test enviornment
  local error_output=$(export HOME=$HOME && cd $working_dir && \
    decompose --init "$git_url" 2>&1 1>/dev/null)
  if [ -n "$error_output" ]; then
    echo "'decompose --init' had errors"
    echo "$error_output"
    return 1
  fi

  return 0
}
_decompose-test-init-git-exists-cleanup() {
  _decompose-test-initialize-environment-cleanup
}

_decompose-test-update-fail-no-init() {
  # Make and set home directory
  mkdir "./tests-workspace/user-home"
  local HOME=$(realpath "./tests-workspace/user-home")

  # Set current working directory
  local working_dir="./tests-workspace/build-test"
  mkdir "./tests-workspace/build-test"

  # Update build test enviornment
  local error_output=$(export HOME=$HOME && cd $working_dir && \
    decompose --update 2>&1 1>/dev/null)
  if [ -n "$error_output" ]; then
    return 0
  fi

  decompose-echoerr "Expected error from 'decompose --update' but did not see error"
  return 1
}
_decompose-test-update-fail-no-init-cleanup() {
  _decompose-test-initialize-environment-cleanup
}

_decompose-test-initialize-environment() {
  # Make and set home directory
  mkdir "./tests-workspace/user-home"
  local HOME=$(realpath "./tests-workspace/user-home")

  # Set current working directory
  working_dir="./tests-workspace/build-test"
  mkdir "./tests-workspace/build-test"

  # Setup git repository
  local git_url=$(realpath ./tests-workspace/build-test-environment)
  git config --global user.email "tester@example.com"
  git config --global user.name "tester"
  git -C "$git_url" init >/dev/null
  git -C "$git_url" add .
  git -C "$git_url" commit -m "Initial commit" >/dev/null

  # Init build test enviornment
  local error_output=$(export HOME=$HOME && cd $working_dir && \
    decompose --init "$git_url" 2>&1 1>/dev/null)
  if [ -n "$error_output" ]; then
    echo "'decompose --init' had errors"
    echo "$error_output"
    return 1
  fi
}
_decompose-test-initialize-environment-cleanup() {
  # Home directory
  local HOME="$(realpath ./tests-workspace/user-home)"

  # Cleanup global data
  $(cd $HOME; mv .local /tmp/$(uuidgen))

  # Cleanup environment data
  test -d "tests-workspace/build-test" && \
    mv "tests-workspace/build-test" "/tmp/$(uuidgen)"

  # Cleanup git repository
  test -d "tests-workspace/build-test-environment/.git" && \
  mv "./tests-workspace/build-test-environment/.git" "/tmp/$(uuidgen)"

  # Cleanup home .gitconfig
  test -f "$HOME/.gitconfig" && rm "$HOME/.gitconfig"
  test -d "$HOME" && rmdir "$HOME"
}

_decompose-test-clean-removes-generated-files() {
  # Build environment
  _decompose-test-building-test
  local error_code="$?"
  if [ "$error_code" -gt "0" ]; then
    echo "Build failed"
    return 1
  fi

  # Run clean
  local error_output=$(export HOME=$HOME && cd $working_dir && \
    decompose --clean 2>&1 1>/dev/null)
  if [ -n "$error_output" ]; then
    echo "'decompose --clean' had errors"
    echo "$error_output"
    return 1
  fi

  # Verify generated files are no longer
  if [[ -f "./tests-workspace/build-test/testing" || \
    -f "./tests-workspace/build-test/123" ]]; then
    echo "'decompose --clean' did not clean generated files"
    return 1
  fi

  return 0
}
_decompose-test-clean-removes-generated-files-cleanup() {
  # Cleanup
  _decompose-test-building-test-cleanup
}

_decompose-test-run-tests() {
  local _decompose_tests_to_run=( 'no-stderr' 'help-test' 'building-test'
    'global-data-directory' 'build-ignores' 'project-root-param'
    'decompose-init-fail' 'initialize-environment' 'init-git-exists'
    'update-fail-no-init' 'clean-removes-generated-files')
  
  for test in ${_decompose_tests_to_run[@]}; do
    # Run test
    _decompose-test-$test
    local error_code="$?"

    # Cleanup test
    decompose_function_exists "_decompose-test-$test-cleanup" && \
      _decompose-test-$test-cleanup
    
    # Report results
    echo -n "Test '$test': "
    if [ "$error_code" -gt "0" ]; then
      echo "FAIL with return code '$error_code'"
    else
      echo "PASS"
    fi
  done
}

_decompose-test-run-tests
