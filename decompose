#!/bin/bash
#
# decompose

# Parse parameters and run the correct command.
#
# Parameters:
#   $1: decompose parameters
decompose-parse-parameters() {
  case $1 in
    "--init")
      decompose-init $2 $3
      ;;
    "--update")
      decompose-update-environment
      ;;
    "--version")
      decompose-version
      ;;
    "--help")
      decompose-print-help
      ;;
    *)
      echo "Unkown parameter '$1'"
      decompose-print-help
      ;;
  esac
}

# Print help
decompose-print-help() {
  cat <<HELP_EOF
decompose - Development Environment Helper

Core commands:

--init <git_url> <environment_name>
  Initialize an environment from a git URL and name
--update
  Update the current environment
--version
  Print version
--help
  This message
HELP_EOF
}

# Initialize environment
#
# Paramaters:
#   $1: environment url
#   $2: environment name
decompose-init() {
  local environment_url=$1
  local environment_name=$2

  # Is $nvironment parameter valid?
  if [ -z "$environment_url" ]; then
    echo "Please supply an environment url to initialize"
    exit 1
  fi

  if [ -z "$environment_name" ]; then
    echo "Please supply an environment name to initialize"
    exit 1
  fi

  # Clone the environment
  local decompose_data_dir=$(realpath ~/.local/share/decompose)
  git clone $environment_url $decompose_data_dir/ecosphere/$environment_name

  # Copy files from clone to .decompose
  # Is environment created already?
  local decompose_directory
  decompose-find-decompose-directory decompose_directory
  if [ -d "$decompose_directory" ]; then
    echo ".decompose directory already exists here:"
    echo "$decompose_directory"
    exit 1
  fi

  echo "Initializing environment"
  mkdir ".decompose"

  # Save decompose environment
  cat <<ENV_FILE > ".decompose/environment_settings"
DECOMPOSE_ENVIRONMENT_URL=$environment_url
DECOMPOSE_ENVIRONMENT_NAME=$environment_name
ENV_FILE

  # Copy environment files
  mkdir ".decompose/environment"
  cp -r $decompose_data_dir/ecosphere/$environment_name/* .decompose/environment

  # Copy skeleton to working directory
  cp -r .decompose/environment/skel/. ./
}

# Load environment settings
decompose-load-environment-settings() {
  local decompose_directory
  decompose-find-decompose-directory decompose_directory

  . $decompose_directory/environment_settings
}

# Updates decompose environment
decompose-update-environment() {
  decompose-load-environment-settings
  local decompose_data_dir=$(realpath ~/.local/share/decompose)
  local decompose_directory
  decompose-find-decompose-directory decompose_directory
  # Update git repository
  git -C "$decompose_data_dir/ecosphere/$DECOMPOSE_ENVIRONMENT_NAME" pull

  # Update environment
  cp -r $decompose_data_dir/ecosphere/$DECOMPOSE_ENVIRONMENT_NAME/* \
$decompose_directory/environment
}

# Finds the decompose directory in parents
#
# Parameters:
#   $1: return value (decompose directory location)
decompose-find-decompose-directory() {
  local current_dir=$(realpath .)
  while [[ ! -d "$current_dir/.decompose" && "$current_dir" != "/" ]]; do
    current_dir=$(realpath $current_dir/../)
  done

  # We hit the end. See if we found .decompose
  if [ -d "$current_dir/.decompose" ]; then
    eval "$1=$current_dir/.decompose"
  fi

  # I guess we didn't find .decompose
}

# Create/collect configuration where necessary
decompose-bootstrap() {
  local decompose_data_dir=$(realpath ~/.local/share/decompose)
  # Create ecosphere
  if [ ! -d "$decompose_data_dir/ecosphere" ]; then
    mkdir -p "$decompose_data_dir/ecosphere"
  fi
}

# Print version
decompose-version() {
  local version="0.1"
  echo "decompose v$version"
}

decompose-bootstrap
decompose-parse-parameters "$@"
