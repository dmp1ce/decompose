# decompose functions
#
# Assume $DIR is defined as the root directory of the calling script.

#!/bin/bash
# Parse parameters and run the correct command.
#
# Parameters:
#   $1: decompose parameters
decompose-parse-parameters() {
  case $1 in
    "--init")
      decompose-init-command $2;;
    "--update")
      decompose-update-environment;;
    "--build")
      decompose-build;;
    "--version")
      decompose-version;;
    "--help")
      decompose-print-help;;
    "--completion")
      decompose-completion;;
    *)
      _decompose-load-processes
      local p; for p in "${DECOMPOSE_PROCESSES[@]}"; do
        if [ "$1" == "$p" ]; then
          decompose-load-elements
          _decompose-process-$p "${@:2}"
          exit 0
        fi
      done

      echo "Unknown parameter '$1'"
      decompose-print-help
      ;;
  esac
}

# Print help
decompose-print-help() {
  decompose-load-elements
  cat <<HELP_EOF
decompose - Development Environment Compose

Core commands:

--init <git_url>
  Initialize an environment from a git URL and name
--update
  Update the current environment
--build
  Build project files from templates
--version
  Print version
--help
  This message
HELP_EOF

  _decompose-load-processes
  if [ "${#DECOMPOSE_PROCESSES[@]}" -gt "0" ]; then
    echo -e "\nEnvironment processes:\n"

    local p; for p in "${DECOMPOSE_PROCESSES[@]}"; do
      echo "$p"
      _decompose-process-"$p"_help
    done
  fi
}

# Return md5 hash of parameter $1
#
# Parameters:
#   $1: string to hash
#   $2: hash value returned
decompose-md5-hash() {
  local string_value=$1
  local __hash_value=$2

  local _hash=$(echo "$string_value" | md5sum)
  eval "$__hash_value=${_hash% -*}"
}

# Initialize the environment (.decompose directory)
#
# Paramaters:
#   $1: environment url
decompose-init-environment() {
  local environment_url=$1

  # Is environment parameter valid?
  if [ -z "$environment_url" ]; then
    echo "Please supply an environment url to initialize"
    return 1
  fi

  # Update git repository
  decompose-update-git-repository $environment_url

  # Copy files from clone to .decompose
  # Is environment created already?
  local decompose_directory
  _decompose-find-decompose-directory decompose_directory
  if [ -d "$decompose_directory" ]; then
    echo ".decompose directory already exists here:"
    echo "$decompose_directory"
    exit 1
  fi

  echo "Initializing environment"

  # If .decompose-init exists then put .decompose in the right place
  local project_root
  _decompose-project-root project_root
  if [ "$?" -gt "0" ]; then
    mkdir ".decompose"
    # Save .decompose-init
    echo "$environment_url" > .decompose-init
  else
    mkdir "$project_root/.decompose"
  fi

  # Project root will definetly exist now.
  _decompose-project-root project_root

  # Copy environment files
  mkdir "$project_root/.decompose/environment"
  local decompose_data_dir; decompose-global-data-dir decompose_data_dir
  local environment_hash
  decompose-md5-hash $environment_url environment_hash
  cp -r "$decompose_data_dir/ecosphere/$environment_hash/"* "$project_root/.decompose/environment"
}

# Initialize environment command
#
# Paramaters:
#   $1: environment url
decompose-init-command() {
  local environment_url=$1

  # Is environment parameter valid?
  if [ -z "$environment_url" ]; then
    echo "Please supply an environment url to initialize"
    exit 1
  fi

  # Create environment
  decompose-init-environment $environment_url

  # If error occured then quit
  if [ "$?" -gt "0" ]; then
    echo "Error occured initializing environment"
    exit 1
  fi

  # Copy skeleton to working directory
  cp -r .decompose/environment/skel/. ./
}

# Return 0 if .decompose exists, else return 1
decompose-directory-exists() {
  local decompose_directory
  _decompose-find-decompose-directory decompose_directory

  # If .decompose is missing then return error code.
  if [ "$?" -gt "0"  ]; then
    return 1
  fi
  return 0
}

# Load elements
decompose-load-elements() {
  local decompose_directory
  _decompose-find-decompose-directory decompose_directory

  # Load default settings and then overrides
  if [ -e $decompose_directory/environment/elements ]; then
    . $decompose_directory/environment/elements
  fi
  if [ -e $decompose_directory/elements ]; then
    . $decompose_directory/elements
  fi

  # Post process elements
  decompose-post-process-elements
}

# Post process elements
decompose-post-process-elements() {
  local p; for p in ${ELEMENTS_POST_PROCESS[@]}; do
    _decompose-elements-$p
  done
}

# Updates a git repository
#
# Parameters
#   $1: git repository URL
decompose-update-git-repository() {
  local git_repo_url=$1

  local decompose_data_dir; decompose-global-data-dir decompose_data_dir

  local git_repo_hash
  decompose-md5-hash $git_repo_url git_repo_hash
  if [ -d "$decompose_data_dir/ecosphere/$git_repo_hash" ]; then
    git -C "$decompose_data_dir/ecosphere/$git_repo_hash" pull --recurse-submodules && \
    git -C "$decompose_data_dir/ecosphere/$git_repo_hash" submodule init && \
    git -C "$decompose_data_dir/ecosphere/$git_repo_hash" submodule update --recursive
  else
    git clone --recursive -q $git_repo_url \
      "$decompose_data_dir/ecosphere/$git_repo_hash"
  fi
}

# Updates decompose environment
decompose-update-environment() {
  # If .decompose-init doesn't exist then there is nothing we can do
  local project_root
  _decompose-project-root project_root
  if [ ! -e "$project_root/.decompose-init" ]; then
    echo "Cannot update '.decompose' because '.decompose-init' is missing"
    echo "Create a '.decompose-init' file with the URL to the environment URL"
    echo "Or delete the '.decompose' directory and run 'decompose --init' again"
    exit 1
  fi

  local environment_url=$(cat "$project_root/.decompose-init")

  # If .decompose directory doesn't exist initialize .decompose directory
  decompose-directory-exists
  if [ "$?" -gt "0" ]; then
    # Initialize .decompose
    decompose-init-environment $environment_url

    return "$?"
  fi

  # Update git repository
  decompose-update-git-repository $environment_url

  # Update environment
  local decompose_data_dir; decompose-global-data-dir decompose_data_dir
  local decompose_directory
  _decompose-find-decompose-directory decompose_directory
  local environment_hash
  decompose-md5-hash $environment_url environment_hash
  if [ -n "$decompose_directory" ]; then
    rm -r $decompose_directory/environment
    mkdir -p $decompose_directory/environment
    cp -r $decompose_data_dir/ecosphere/$environment_hash/* \
      $decompose_directory/environment
  fi
}

# Build project files from templates
decompose-build() {
  echo "Building project files from templates"

  # Get elements
  decompose-load-elements

  # Process templates
  decompose-process-templates
}

# Process .mo files
decompose-process-templates() {
  # Find all .mo files
  local project_root
  _decompose-project-root project_root
  local ignore_string=""
  local i; for i in "${PROJECT_IGNORE_BUILD[@]}"; do
    ignore_string="$ignore_string ! -path $i"
  done

  local find_results=$(find $project_root -path "$project_root/.decompose" \
-prune -o $ignore_string -name "*.mo" -print)
  local templates=( $find_results )

  # Process .mo files
  local t; for t in ${templates[@]}; do
    cat $t | . "$DIR/mo/mo" > ${t%.*}
    chmod --reference $t ${t%.*}
    echo "$t -> ${t%.*}"
  done
}

# Create/collect configuration where necessary
decompose-bootstrap() {
  # Verify dependencies
  decompose-verify-dependencies
  if [ "$?" -ne "0" ]; then
    echo "Please install missing dependencies"
    exit 1
  fi

  local decompose_data_dir; decompose-global-data-dir decompose_data_dir
  # Create ecosphere
  if [ ! -d "$decompose_data_dir/ecosphere" ]; then
    mkdir -p "$decompose_data_dir/ecosphere"
  fi
}

# Return the decompose global data directory
# Will create the directory if it doesn't exist
#
# Parameters
#   $1: return value (global data directory)
decompose-global-data-dir() {
  local __return_value=$1
  local _data_directory="$HOME/.local/share/decompose"

  if [ ! -d "$_data_directory" ]; then
    echo "Creating global data directory: '$_data_directory'"
    mkdir -p "$_data_directory"
  fi
  eval "$__return_value=$_data_directory"
}

# Return 1 if the function name passed in exists
#
# Parameters
#   $1: function name to check
decompose_function_exists() {
    declare -f -F $1 > /dev/null
    return $?
}

# Print dependencies that are missing
decompose-verify-dependencies() {
  local return_code
  local checks=('bash' 'which' 'echo' 'cat' 'mkdir' 'git' 'realpath' 'cp' 'find'
    'chmod' 'md5sum')

  local check; for check in ${checks[@]}; do
    which $check >/dev/null 2>&1
    if [ "$?" -ne "0" ]; then
      echo "'$check' command is missing"
      return_code=1
      if [ "$check" == "which" ]; then break; fi
    fi
  done

  # Check that mo exists.
  if [ ! -e "$DIR/mo/mo" ]; then
    echo "'mo' is missing"
    return_code=1
  fi

  return $return_code
}

# Print version
decompose-version() {
  local version="0.13"
  echo "decompose v$version"
}
# vim:syntax=sh
